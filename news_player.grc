options:
  parameters:
    author: Joel Lehtonen
    category: '[GRC Hier Blocks]'
    cmake_opt: ''
    comment: ''
    copyright: ''
    description: ''
    gen_cmake: 'On'
    gen_linking: dynamic
    generate_options: no_gui
    hier_block_src_path: '.:'
    id: news_player
    max_nouts: '0'
    output_language: python
    placement: (0,0)
    qt_qss_theme: ''
    realtime_scheduling: '1'
    run: 'True'
    run_command: '{python} -u {filename}'
    run_options: run
    sizing_mode: fixed
    thread_safe_setters: ''
    title: News player
    window_size: ''
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [8, 8]
    rotation: 0
    state: enabled

blocks:
- name: redsea_rate
  id: variable
  parameters:
    comment: ''
    value: '171000'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [200, 16.0]
    rotation: 0
    state: enabled
- name: audio_device
  id: parameter
  parameters:
    alias: ''
    comment: ''
    hide: none
    label: Audio device
    short_id: a
    type: str
    value: pulse
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [448, 16.0]
    rotation: 0
    state: true
- name: audio_rate
  id: parameter
  parameters:
    alias: ''
    comment: ''
    hide: none
    label: Audio rate in Hz
    short_id: r
    type: intx
    value: '48000'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [304, 16.0]
    rotation: 0
    state: true
- name: audio_sink
  id: audio_sink
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    device_name: audio_device
    num_inputs: '1'
    ok_to_block: 'False'
    samp_rate: '48000'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1072, 264.0]
    rotation: 0
    state: enabled
- name: blocks_file_source_0
  id: blocks_file_source
  parameters:
    affinity: ''
    alias: ''
    begin_tag: pmt.PMT_NIL
    comment: ''
    file: /home/joell/projektit/labiuutiset/poista.raw
    length: '0'
    maxoutbuf: '0'
    minoutbuf: '0'
    offset: '0'
    repeat: 'True'
    type: short
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [32, 304.0]
    rotation: 0
    state: true
- name: fd_source
  id: blocks_file_descriptor_source
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    fd: '0'
    maxoutbuf: '0'
    minoutbuf: '0'
    repeat: 'False'
    type: short
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [48, 216.0]
    rotation: 0
    state: disabled
- name: fm_deemph
  id: analog_fm_deemph
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    samp_rate: redsea_rate
    tau: 50e-6
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [480, 216.0]
    rotation: 0
    state: true
- name: muter
  id: blocks_mute_xx
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    mute: 'True'
    type: float
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [704, 232.0]
    rotation: 0
    state: true
- name: pty
  id: parameter
  parameters:
    alias: ''
    comment: ''
    hide: none
    label: PTY to play
    short_id: p
    type: str
    value: News
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [704, 16.0]
    rotation: 0
    state: true
- name: pty_mute
  id: epy_block
  parameters:
    _source_code: "\"\"\"\nSend mute and kill signals based on messages status\n\"\
      \"\"\n\nimport numpy as np\nfrom gnuradio import gr\nimport pmt\nimport sys\n\
      \nclass blk(gr.sync_block):  # other base classes are basic_block, decim_block,\
      \ interp_block\n    \"\"\"Embedded Python Block example - a simple multiply\
      \ const\"\"\"\n\n    def __init__(self, top_block=None, target_pty=\"News\"\
      , stop_after=True):  # only default arguments here\n        \"\"\"arguments\
      \ to this function show up as parameters in GRC\"\"\"\n        gr.sync_block.__init__(\n\
      \            self,\n            name='PTY unmuter',   # will show up in GRC\n\
      \            in_sig=[],\n            out_sig=[]\n        )\n        self.message_port_register_in(pmt.intern(\"\
      pty\"))\n        self.message_port_register_out(pmt.intern(\"mute\"))\n    \
      \    self.set_msg_handler(pmt.intern('pty'), self.pty_msg)\n\n        # if an\
      \ attribute with the same name as a parameter is found,\n        # a callback\
      \ is registered (properties work, too).\n        self.target_pty = target_pty\n\
      \        self.die_state = 1\n        self.top_block = top_block\n        self.stop_after\
      \ = stop_after\n\n    def pty_msg(self, new_pty):\n        print(str(new_pty))\n\
      \        mute = str(new_pty) != self.target_pty\n        self.message_port_pub(pmt.intern('mute'),\
      \ pmt.from_bool(mute))\n\n        if (not mute and self.die_state == 0) or (mute\
      \ and self.die_state == 1):\n            self.die_state += 1\n            if\
      \ self.die_state == 2:\n                if self.top_block is not None and self.stop_after\
      \ != 0:\n                    self.top_block.stop()\n\n"
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    stop_after: stop_after
    target_pty: pty
    top_block: self
  states:
    _io_cache: ('PTY unmuter', 'blk', [('top_block', 'None'), ('target_pty', "'News'"),
      ('stop_after', 'True')], [('pty', 'message', 1)], [('mute', 'message', 1)],
      'Embedded Python Block example - a simple multiply const', ['stop_after', 'target_pty',
      'top_block'])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [480, 320.0]
    rotation: 0
    state: true
- name: redsea
  id: epy_block
  parameters:
    _source_code: "\"\"\"\nRedsea integration\n\"\"\"\n\nimport numpy as np\nfrom\
      \ gnuradio import gr\nimport pmt\nimport subprocess\nimport select\nimport json\n\
      \nclass debounce():\n    \"\"\"Debounce for a value. Value has to be present\
      \ in given number of\n       successive packets before it's considered stable.\"\
      \"\"\n\n    def __init__(self, streak=3):\n        self.streak = streak\n  \
      \      self.current = None\n        self.pending = None\n\n    def got(self,\
      \ value):\n        # No data in input, ignore\n        if value is None:\n \
      \           return None\n\n        # If got current value, reset pending value\n\
      \        if value == self.current:\n            self.pending = None\n      \
      \      return None\n\n        # If value is not pending, make it one\n     \
      \   if value != self.pending:\n            self.pending = value\n          \
      \  self.tries = self.streak\n\n        # Check if target reached\n        self.tries\
      \ -= 1\n        if self.tries == 0:\n            self.current = self.pending\n\
      \            self.pending = None\n            return self.current\n\n      \
      \  # Nothing changed\n        return None\n\nclass blk(gr.sync_block):  # other\
      \ base classes are basic_block, decim_block, interp_block\n    \"\"\"Redsea\
      \ RDS decoder integration\"\"\"\n\n    def __init__(self, command=\"redsea\"\
      ):  # only default arguments here\n        \"\"\"arguments to this function\
      \ show up as parameters in GRC\"\"\"\n        gr.sync_block.__init__(\n    \
      \        self,\n            name='RDS parser',   # will show up in GRC\n   \
      \         in_sig=[np.int16],\n            out_sig=[]\n        )\n        self.message_port_register_out(pmt.intern(\"\
      pty\"))\n        \n        # Fork process later because otherwise gnuradio does\
      \ it too early\n        self.redsea = None\n        self.command = command\n\
      \        self.pty_debounce = debounce()\n\n    def work(self, input_items, output_items):\n\
      \        \"\"\"Throw data to Red Sea\"\"\"\n        if self.redsea is None:\n\
      \            self.redsea = subprocess.Popen([self.command], stdin=subprocess.PIPE,\
      \ stdout=subprocess.PIPE)\n\n        # Receive JSON if any\n        while True:\n\
      \            reading, _, _ = select.select([self.redsea.stdout] , [self.redsea.stdin],\
      \ [])\n            if (reading == []):\n                break\n\n          \
      \  rds = json.loads(self.redsea.stdout.readline())\n            if \"prog_type\"\
      \ in rds:\n                new_pty = self.pty_debounce.got(rds[\"prog_type\"\
      ])\n                if new_pty is not None:\n                    self.message_port_pub(pmt.intern('pty'),\
      \ pmt.intern(new_pty))\n\n        # Send data to Redsea\n        self.redsea.stdin.write(input_items[0].tobytes())\n\
      \n        # Just copy data intact\n        return len(input_items[0])\n"
    affinity: ''
    alias: ''
    command: redsea_path
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
  states:
    _io_cache: ('RDS parser', 'blk', [('command', "'redsea'")], [('0', 'short', 1)],
      [('pty', 'message', 1)], 'Redsea RDS decoder integration', ['command'])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [280, 336.0]
    rotation: 0
    state: enabled
- name: redsea_path
  id: parameter
  parameters:
    alias: ''
    comment: ''
    hide: none
    label: Path to Redsea
    short_id: R
    type: str
    value: ./redsea
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [568, 16.0]
    rotation: 0
    state: true
- name: resample_to_audio
  id: mmse_resampler_xx
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    phase_shift: '0'
    resamp_ratio: redsea_rate/audio_rate
    type: float
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [864, 248.0]
    rotation: 0
    state: true
- name: stop_after
  id: parameter
  parameters:
    alias: ''
    comment: ''
    hide: none
    label: Exit after given PTY ends
    short_id: s
    type: intx
    value: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [824, 16.0]
    rotation: 0
    state: true
- name: to_float
  id: blocks_short_to_float
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    scale: 2**15
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [304, 224.0]
    rotation: 0
    state: true

connections:
- [blocks_file_source_0, '0', redsea, '0']
- [blocks_file_source_0, '0', to_float, '0']
- [fd_source, '0', redsea, '0']
- [fd_source, '0', to_float, '0']
- [fm_deemph, '0', muter, '0']
- [muter, '0', resample_to_audio, '0']
- [pty_mute, mute, muter, set_mute]
- [redsea, pty, pty_mute, pty]
- [resample_to_audio, '0', audio_sink, '0']
- [to_float, '0', fm_deemph, '0']

metadata:
  file_format: 1
