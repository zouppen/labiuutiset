options:
  parameters:
    author: ''
    category: '[GRC Hier Blocks]'
    cmake_opt: ''
    comment: ''
    copyright: ''
    description: ''
    gen_cmake: 'On'
    gen_linking: dynamic
    generate_options: no_gui
    hier_block_src_path: '.:'
    id: pipefm
    max_nouts: '0'
    output_language: python
    placement: (0,0)
    qt_qss_theme: ''
    realtime_scheduling: '1'
    run: 'True'
    run_command: '{python} -u {filename}'
    run_options: run
    sizing_mode: fixed
    thread_safe_setters: ''
    title: Not titled yet
    window_size: ''
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [8, 8]
    rotation: 0
    state: enabled

blocks:
- name: redsea_rate
  id: variable
  parameters:
    comment: ''
    value: '171000'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [200, 16.0]
    rotation: 0
    state: enabled
- name: analog_fm_deemph_0
  id: analog_fm_deemph
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    samp_rate: redsea_rate
    tau: 50e-6
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [480, 216.0]
    rotation: 0
    state: true
- name: audio_device
  id: parameter
  parameters:
    alias: ''
    comment: ''
    hide: none
    label: Audio device
    short_id: a
    type: str
    value: pulse
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [448, 16.0]
    rotation: 0
    state: true
- name: audio_rate
  id: parameter
  parameters:
    alias: ''
    comment: ''
    hide: none
    label: Audio rate in Hz
    short_id: r
    type: intx
    value: '48000'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [304, 16.0]
    rotation: 0
    state: true
- name: audio_sink_0
  id: audio_sink
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    device_name: audio_device
    num_inputs: '1'
    ok_to_block: 'True'
    samp_rate: '48000'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1104, 264.0]
    rotation: 0
    state: enabled
- name: blocks_file_descriptor_source_0
  id: blocks_file_descriptor_source
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    fd: '0'
    maxoutbuf: '0'
    minoutbuf: '0'
    repeat: 'False'
    type: short
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [32, 216.0]
    rotation: 0
    state: true
- name: blocks_mute_xx_0
  id: blocks_mute_xx
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    mute: 'True'
    type: float
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [720, 232.0]
    rotation: 0
    state: true
- name: blocks_short_to_float_0
  id: blocks_short_to_float
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    scale: 2**15
    vlen: '1'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [304, 224.0]
    rotation: 0
    state: true
- name: epy_block_0
  id: epy_block
  parameters:
    _source_code: "\"\"\"\nRedsea integration\n\nTODO\n\"\"\"\n\nimport numpy as np\n\
      from gnuradio import gr\nimport pmt\nimport subprocess\nimport select\nimport\
      \ json\n\nclass debounce():\n    \"\"\"Debounce for a value. Value has to be\
      \ present in given number of\n       successive packets before it's considered\
      \ stable.\"\"\"\n\n    def __init__(self, streak=3):\n        self.streak =\
      \ streak\n        self.current = None\n        self.pending = None\n\n    def\
      \ got(self, value):\n        # No data in input, ignore\n        if value is\
      \ None:\n            return None\n\n        # If got current value, reset pending\
      \ value\n        if value == self.current:\n            self.pending = None\n\
      \            return None\n\n        # If value is not pending, make it one\n\
      \        if value != self.pending:\n            self.pending = value\n     \
      \       self.tries = self.streak\n\n        # Check if target reached\n    \
      \    self.tries -= 1\n        if self.tries == 0:\n            self.current\
      \ = self.pending\n            self.pending = None\n            return self.current\n\
      \n        # Nothing changed\n        return None\n\nclass blk(gr.sync_block):\
      \  # other base classes are basic_block, decim_block, interp_block\n    \"\"\
      \"Redsea RDS decoder integration\"\"\"\n\n    def __init__(self, command=\"\
      redsea\", target_pty=\"News\", quit_after=False):  # only default arguments\
      \ here\n        \"\"\"arguments to this function show up as parameters in GRC\"\
      \"\"\n        gr.sync_block.__init__(\n            self,\n            name='RDS\
      \ tagger',   # will show up in GRC\n            in_sig=[np.int16],\n       \
      \     out_sig=[]\n        )\n        self.message_port_register_out(pmt.intern(\"\
      wrong_pty\"))\n        \n        self.level = 1\n\n        # Fork process later\
      \ because otherwise gnuradio does it too early\n        self.redsea = None\n\
      \        self.command = command\n        self.target_pty = target_pty\n    \
      \    self.quit_after = quit_after\n        self.ready_to_die = False\n     \
      \   self.pty_debounce = debounce()\n\n    def work(self, input_items, output_items):\n\
      \        \"\"\"Throw data to Red Sea\"\"\"\n        if self.redsea is None:\n\
      \            self.redsea = subprocess.Popen([self.command], stdin=subprocess.PIPE,\
      \ stdout=subprocess.PIPE)\n\n        # Receive JSON if any\n        while True:\n\
      \            reading, _, _ = select.select([self.redsea.stdout] , [self.redsea.stdin],\
      \ [])\n            if (reading == []):\n                break\n\n          \
      \  rds = json.loads(self.redsea.stdout.readline())\n            if \"prog_type\"\
      \ in rds:\n                new_pty = self.pty_debounce.got(rds[\"prog_type\"\
      ])\n                if new_pty == self.target_pty:\n                    self.message_port_pub(pmt.intern('wrong_pty'),\
      \ pmt.PMT_F)\n                    self.ready_to_die = True\n               \
      \ elif new_pty is not None:\n                    self.message_port_pub(pmt.intern('wrong_pty'),\
      \ pmt.PMT_T)\n                    if self.quit_after and self.ready_to_die:\
      \ return -1\n\n        # Send data to Redsea\n        self.redsea.stdin.write(input_items[0].tobytes())\n\
      \n        # Just copy data intact\n        return len(input_items[0])\n"
    affinity: ''
    alias: ''
    command: '"/home/joell/koodaus/redsea/src/redsea"'
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    quit_after: 'True'
    target_pty: '''News'''
  states:
    _io_cache: ('RDS tagger', 'blk', [('command', "'redsea'"), ('target_pty', "'News'"),
      ('quit_after', 'False')], [('0', 'short', 1)], [('wrong_pty', 'message', 1)],
      'Redsea RDS decoder integration', ['command', 'quit_after', 'target_pty'])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [304, 312.0]
    rotation: 0
    state: enabled
- name: mmse_resampler_xx_0
  id: mmse_resampler_xx
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    phase_shift: '0'
    resamp_ratio: redsea_rate/audio_rate
    type: float
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [896, 248.0]
    rotation: 0
    state: true

connections:
- [analog_fm_deemph_0, '0', blocks_mute_xx_0, '0']
- [blocks_file_descriptor_source_0, '0', blocks_short_to_float_0, '0']
- [blocks_file_descriptor_source_0, '0', epy_block_0, '0']
- [blocks_mute_xx_0, '0', mmse_resampler_xx_0, '0']
- [blocks_short_to_float_0, '0', analog_fm_deemph_0, '0']
- [epy_block_0, wrong_pty, blocks_mute_xx_0, set_mute]
- [mmse_resampler_xx_0, '0', audio_sink_0, '0']

metadata:
  file_format: 1
